#include "r8a779f0-spider.dts"
#include "xen-chosen.dtsi"

/ {

	model = "Renesas Spider CPU and Breakout boards based on r8a779f0, running XEN hypervisor";

	/* Workaround U-Boot issue with memory nodes duplication */
	/delete-node/ memory@48000000;
	/delete-node/ memory@480000000;
	memory@48000000 {
		device_type = "memory";
		/* first 128MB is reserved for secure area. */
		reg = <0x0 0x48000000 0x0 0x78000000
		       0x4 0x80000000 0x0 0x80000000>;
	};
};

&ipmmu_mm {
	status = "okay";
};

&ipmmu_rt0 {
	status = "okay";
};

/ {
	soc {
		ipmmu_rt1: mmu@ee4c0000 {
			compatible = "renesas,ipmmu-r8a779f0";
			reg = <0 0xee4c0000 0 0x20000>;
			renesas,ipmmu-main = <&ipmmu_mm 19>;
			power-domains = <&sysc R8A779F0_PD_ALWAYS_ON>;
			#iommu-cells = <1>;
		};
	};
};

/* Make sure Xen console is enabled. */
&scif3	{
	status = "okay";
};

&pciec0 {
	reg = <0 0xe65d0000 0 0x3000>,
	      <0 0xe65d3000 0 0x2000>,
	      <0 0xe65d5000 0 0x1200>,
	      <0 0xe65d6200 0 0x0e00>,
	      <0 0xe65d7000 0 0x1000>,
	      <0 0xfe000000 0 0x400000>;
		 /* downstream IO */
	ranges = <0x81000000 0 0x00000000 0 0xfe000000 0 0x00400000
		 /* non-prefetchable memory */
		 0x82000000 0 0x30000000 0 0x30000000 0 0x10000000>;
	pinctrl-0 = <&pcie0_pins>, <&pcie1_pins>;
};

/*
 * FIXME: Xen also parses disabled nodes: according to device tree specification
 * such nodes may become available at run-time.
 */
&pciec1 {
	reg = <0 0xe65d8000 0 0x3000>,
	      <0 0xe65db000 0 0x2000>,
	      <0 0xe65dd000 0 0x1200>,
	      <0 0xe65de200 0 0x0e00>,
	      <0 0xe65df000 0 0x1000>,
	      <0 0xee900000 0 0x400000>;
		 /* downstream IO */
	ranges = <0x81000000 0 0x00000000 0 0xee900000 0 0x00400000
		 /* non-prefetchable memory */
		 0x82000000 0 0xc0000000 0 0xc0000000 0 0x10000000>;
};

/*
 * Delete PCIEC0 Endpoint node for vPCI to be able to trap
 * PCI configuration space access.
 *
 * PCIe controller 0 may operate in two modes: Root Complex or
 * Endpoint. The are two corresponding device tree nodes for
 * that: pciec0 and pciec0_ep. So, when you want the controller
 * to be in a Root Complex mode then you put status = "disabled"
 * for the Endpoint entry and vise versa. Please note that both
 * nodes define the same "reg" and "interrupts" values.
 *
 * Xen, when it initializes the trap handlers for PCI
 * configuration space access, needs the relevant regions to be
 * NOT mapped into Domain-0's address space, but because of the
 * current logic implemented it still assumes that the "disabled"
 * status is valid and maps. So, it doesn't map MMIOs for
 * the "okay" pciec0, but maps the same regions for pciec0_ep
 * which is "disabled". for that reason, remove pciec0_ep
 * node from the tree.
 */
/delete-node/ &pciec0_ep;

&ipmmu_ds0{
	status = "okay";
};

&ipmmu_hc {
	status = "okay";
};

&mmc0 {
	iommus = <&ipmmu_ds0 32>;
};

&rswitch {
	iommus = <&ipmmu_hc 0>, <&ipmmu_hc 1>,
		 <&ipmmu_hc 2>, <&ipmmu_hc 3>,
		 <&ipmmu_hc 4>, <&ipmmu_hc 5>,
		 <&ipmmu_hc 6>, <&ipmmu_hc 7>,
		 <&ipmmu_hc 16>, <&ipmmu_hc 17>,
		 <&ipmmu_hc 18>, <&ipmmu_hc 19>,
		 <&ipmmu_hc 20>, <&ipmmu_hc 21>,
		 <&ipmmu_hc 22>, <&ipmmu_hc 23>;
};

&dmac1 {
	iommus = <&ipmmu_ds0 0>, <&ipmmu_ds0 1>,
		 <&ipmmu_ds0 2>, <&ipmmu_ds0 3>,
		 <&ipmmu_ds0 4>, <&ipmmu_ds0 5>,
		 <&ipmmu_ds0 6>, <&ipmmu_ds0 7>,
		 <&ipmmu_ds0 8>, <&ipmmu_ds0 9>,
		 <&ipmmu_ds0 10>, <&ipmmu_ds0 11>,
		 <&ipmmu_ds0 12>, <&ipmmu_ds0 13>,
		 <&ipmmu_ds0 14>, <&ipmmu_ds0 15>;
};

&dmac2 {
	iommus = <&ipmmu_ds0 16>, <&ipmmu_ds0 17>,
		 <&ipmmu_ds0 18>, <&ipmmu_ds0 19>,
		 <&ipmmu_ds0 20>, <&ipmmu_ds0 21>,
		 <&ipmmu_ds0 22>, <&ipmmu_ds0 23>,
		 <&ipmmu_ds0 24>, <&ipmmu_ds0 25>,
		 <&ipmmu_ds0 26>, <&ipmmu_ds0 27>,
		 <&ipmmu_ds0 28>, <&ipmmu_ds0 29>,
		 <&ipmmu_ds0 30>, <&ipmmu_ds0 31>;
};

&rt_dmac0 {
	iommus = <&ipmmu_rt1 0>, <&ipmmu_rt1 1>,
		 <&ipmmu_rt1 2>, <&ipmmu_rt1 3>,
		 <&ipmmu_rt1 4>, <&ipmmu_rt1 5>,
		 <&ipmmu_rt1 6>, <&ipmmu_rt1 7>,
		 <&ipmmu_rt1 8>, <&ipmmu_rt1 9>,
		 <&ipmmu_rt1 10>, <&ipmmu_rt1 11>,
		 <&ipmmu_rt1 12>, <&ipmmu_rt1 13>,
		 <&ipmmu_rt1 14>, <&ipmmu_rt1 15>;
};

&rt_dmac1 {
	iommus = <&ipmmu_rt1 16>, <&ipmmu_rt1 17>,
		 <&ipmmu_rt1 18>, <&ipmmu_rt1 19>,
		 <&ipmmu_rt1 20>, <&ipmmu_rt1 21>,
		 <&ipmmu_rt1 22>, <&ipmmu_rt1 23>,
		 <&ipmmu_rt1 24>, <&ipmmu_rt1 25>,
		 <&ipmmu_rt1 26>, <&ipmmu_rt1 27>,
		 <&ipmmu_rt1 28>, <&ipmmu_rt1 29>,
		 <&ipmmu_rt1 30>, <&ipmmu_rt1 31>;
};

&rt_dmac2 {
	iommus = <&ipmmu_rt1 32>, <&ipmmu_rt1 33>,
		 <&ipmmu_rt1 34>, <&ipmmu_rt1 35>,
		 <&ipmmu_rt1 36>, <&ipmmu_rt1 37>,
		 <&ipmmu_rt1 38>, <&ipmmu_rt1 39>,
		 <&ipmmu_rt1 40>, <&ipmmu_rt1 41>,
		 <&ipmmu_rt1 42>, <&ipmmu_rt1 43>,
		 <&ipmmu_rt1 44>, <&ipmmu_rt1 45>,
		 <&ipmmu_rt1 46>, <&ipmmu_rt1 47>;
};

&rt_dmac3 {
	iommus = <&ipmmu_rt1 48>, <&ipmmu_rt1 49>,
		 <&ipmmu_rt1 50>, <&ipmmu_rt1 51>,
		 <&ipmmu_rt1 52>, <&ipmmu_rt1 53>,
		 <&ipmmu_rt1 54>, <&ipmmu_rt1 55>,
		 <&ipmmu_rt1 56>, <&ipmmu_rt1 57>,
		 <&ipmmu_rt1 58>, <&ipmmu_rt1 59>,
		 <&ipmmu_rt1 60>, <&ipmmu_rt1 61>,
		 <&ipmmu_rt1 62>, <&ipmmu_rt1 63>;
};

&pciec0 {
	iommus = <&ipmmu_hc 32>;
	iommu-map = <0x0 &ipmmu_hc 32 0x1>,
		    <0x100 &ipmmu_hc 33 0x1>;
	iommu-map-mask = <0xff00>;
};

&pciec1 {
	iommus = <&ipmmu_hc 48>;
	iommu-map = <0x0 &ipmmu_hc 48 0x1>,
		    <0x100 &ipmmu_hc 49 0x1>;
	iommu-map-mask = <0xff00>;
};

&dmac1			{ xen,passthrough; };
&dmac2			{ xen,passthrough; };
&rt_dmac0		{ xen,passthrough; };
&rt_dmac1		{ xen,passthrough; };
&rt_dmac2		{ xen,passthrough; };
&rt_dmac3		{ xen,passthrough; };
&gpio0			{ xen,passthrough; };
&gpio1			{ xen,passthrough; };
&gpio2			{ xen,passthrough; };
&gpio3			{ xen,passthrough; };
&i2c0			{ xen,passthrough; };
&i2c4			{ xen,passthrough; };
&mmc0			{ xen,passthrough; };
&pciec0			{ xen,passthrough; };
&scif0			{ xen,passthrough; };
&rswitch		{ xen,passthrough; };
&tsc			{ xen,passthrough; };
&iccom00		{ xen,passthrough; };

&soc {
	iccom01		{ xen,passthrough; };
	iccom010	{ xen,passthrough; };
	iccom011	{ xen,passthrough; };
	iccom012	{ xen,passthrough; };
	iccom013	{ xen,passthrough; };
	iccom014	{ xen,passthrough; };
	iccom015	{ xen,passthrough; };
	iccom02		{ xen,passthrough; };
	iccom03		{ xen,passthrough; };
	iccom04		{ xen,passthrough; };
	iccom05		{ xen,passthrough; };
	iccom06		{ xen,passthrough; };
	iccom07		{ xen,passthrough; };
	iccom08		{ xen,passthrough; };
	iccom09		{ xen,passthrough; };
	iccom100	{ xen,passthrough; };
	iccom101	{ xen,passthrough; };
	iccom102	{ xen,passthrough; };
	iccom103	{ xen,passthrough; };
	iccom104	{ xen,passthrough; };
	iccom105	{ xen,passthrough; };
	iccom106	{ xen,passthrough; };
	iccom107	{ xen,passthrough; };
	iccom108	{ xen,passthrough; };
	iccom109	{ xen,passthrough; };
	iccom110	{ xen,passthrough; };
	iccom111	{ xen,passthrough; };
	iccom112	{ xen,passthrough; };
	iccom113	{ xen,passthrough; };
	iccom114	{ xen,passthrough; };
	iccom115	{ xen,passthrough; };
};
